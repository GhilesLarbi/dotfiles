##############################################################
#################  Options ###################################

# interpreter for shell commands
set shell sh
# set drawbox true
set borderfmt "\033[0;90mm"
set hidden  true
set ratios 3:2
set previewer ~/.config/lf/previewer

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

set cursoractivefmt  "\033[7m"
set cursorpreviewfmt "\033[7;2m"

set icons true
#set preview false
#set mouse   true
#set number  true


# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10


set promptfmt "
\033[48;2;35;38;39;38;2;28;220;156m 󰣇  
\033[38;2;35;38;39;48;2;202;31;31m
\033[38;2;202;31;31;48;2;40;47;62m
\033[38;2;255;255;255m %w 
\033[38;2;40;47;62;48;2;58;67;89m
\033[38;2;255;255;255m %f 
\033[;38;2;58;67;89;49m\033[m"

set timefmt "02/01/2006 15:04:05 "
set infotimefmtnew '02/01 15:04'
set infotimefmtold '02/01/06'
set errorfmt "\033[1;31m"
set numberfmt "\033[38;2;75;87;116m"

set cursorpreviewfmt "\033[7m"

%test $LF_LEVEL -eq 1 || >&2 printf "Warning: You're in a nested lf instance!"

##############################################################
#################  Commands ##################################



# define a custom 'open' command
# This command is called when current file is t a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
		application/pdf) lf -remote "send $id \$firefox \$fx";;
		application/*) lf -remote "send $id \$$EDITOR \$fx";;
		#image/*) lf -remote "send $id \$feh --geometry 900x600 --scale-down --no-menus \$fx";;
		image/*) feh --scale-down --no-menus $fx;;
		video/*) lf -remote "send $id \$play \$fx";;
		audio/*) lf -remote "send $id \$play \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/2 - 1)); tput bold
	set -f
	printf -- "%s\n" $fx | sed 's|'"$HOME"'| |'
	printf "\033[1;33mAre you sure you wanna delete this file? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yY]) rm -rf -- $fx ;;
	esac
}}


cmd chmodx &{{
	chmod u+x $fx
	lf -remote "send $id reload"
}}

cmd q :quit


# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


##############################################################
#################  Keybinding ################################


# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# use enter for shell commands
map <enter> open
map <backspace2> updir

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
#map o &mimeopen $f
#map O $mimeopen --ask $f
# map r push :rename<space>
